@ARTICLE{6392174,
  author={Sjøberg, Dag I.K. and Yamashita, Aiko and Anda, Bente C.D. and Mockus, Audris and Dybå, Tore},
  title={Quantifying the Effect of Code Smells on Maintenance Effort}, 
  year={2013},
  number={8},
  doi={10.1109/TSE.2012.89}}
@article{Fault-Prone,
author = {Abidi, Mouna and Rahman, Md Saidur and Openja, Moses and Khomh, Foutse},
title = {Are Multi-Language Design Smells Fault-Prone? An Empirical Study},
year = {2021},
issue_date = {July 2021},
issn = {1049-331X},
url = {https://doi.org/10.1145/3432690},
doi = {10.1145/3432690},
journal = {ACM Trans. Softw. Eng. Methodol.},
keywords = {multi-language systems, mining software repositories, empirical studies, code smells, anti-patterns, Design smells}
}

@inbook{Fowler_Beck,
 title={Bad Smells in Code}, 
 booktitle={Refactoring: Improving the Design of Existing Code}, 
 author={Fowler, Martin and Beck, Kent},
 year={1999}
 } 

@INPROCEEDINGS{6405287,
  author={Yamashita, Aiko and Moonen, Leon},
  booktitle={2012 28th IEEE ICSM}, 
  title={Do code smells reflect important maintainability aspects?}, 
  year={2012},
  doi={10.1109/ICSM.2012.6405287}}

@INPROCEEDINGS{5741260,
  author={Abbes, Marwen and Khomh, Foutse and Guéhéneuc, Yann-Gaël and Antoniol, Giuliano},
  booktitle={2011 15th European CSMR}, 
  title={An Empirical Study of the Impact of Two Antipatterns, Blob and Spaghetti Code, on Program Comprehension}, 
  year={2011},
  doi={10.1109/CSMR.2011.24}}

@INPROCEEDINGS{Palomba,
  author={Palomba, Fabio and Panichella, Annibale and De Lucia, Andrea and Oliveto, Rocco and Zaidman, Andy},
  booktitle={2016 IEEE 24th International Conference on Program Comprehension (ICPC)}, 
  title={A textual-based technique for Smell Detection}, 
  year={2016},
  volume={},
  number={},
  pages={1-10},
  keywords={Detectors;Measurement;Feature extraction;Algorithm design and analysis;Vocabulary;Large scale integration;Programming},
  doi={10.1109/ICPC.2016.7503704}}


@inproceedings{DetectingDefectsInObject,
author = {Travassos, Guilherme and Shull, Forrest and Fredericks, Michael and Basili, Victor R.},
title = {Detecting Defects in Object-oriented Designs: Using Reading Techniques to Increase Software Quality},
year = {1999},
doi = {10.1145/320384.320389},
booktitle = {Proceedings of the 14th ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications},
}

@misc{PMD,
title={PMD},
url={https://github.com/pmd},
year={2012}, 
} 

@misc{CheckStyle,
title={Checkstyle},
url={https://github.com/checkstyle/checkstyle},
year={2013}, 
}

@inproceedings{723183,
  author={Kullbach, B. and Winter, A. and Dahm, P. and Ebert, J.},
  booktitle={Proc. Fifth Working Conf. Reverse Eng. (Cat. No. 98TB100261)},
  title={Program Comprehension in Multi-language Systems}, 
  year={1998},
  doi={10.1109/WCRE.1998.723183}}


@inproceedings{10.1109/SCAM.2012.11,
author = {Mayer, Philip and Schroeder, Andreas},
title = {Cross-Language Code Analysis and Refactoring},
year = {2012},
isbn = {9780769547831},
url = {https://doi.org/10.1109/SCAM.2012.11},
doi = {10.1109/SCAM.2012.11},
abstract = {Software composed of artifacts written in multiple (programming) languages is pervasive in today's enterprise, desktop, and mobile applications. Since they form one system, artifacts from different languages reference one another, thus creating what we call semantic cross-language links. By their very nature, such links are out of scope of the individual programming language, they are ignored by most language-specific tools and are often only established -- and checked for errors -- at runtime. This is unfortunate since it requires additional testing, leads to brittle code, and lessens maintainability. In this paper, we advocate a generic approach to understanding, analyzing and refactoring cross-language code by explicitly specifying and exploiting semantic links with the aim of giving developers the same amount of control over and confidence in multi-language programs they have for single-language code today.},
booktitle={Proc. 2012 IEEE 12th Int. Working Conf. Source Code Anal. Manip.},
series = {SCAM '12}
}

@INPROCEEDINGS{7476675,
  author={Kochhar, Pavneet Singh and Wijedasa, Dinusha and Lo, David},
  booktitle={2016 IEEE 23rd SANER},
  title={A Large Scale Study of Multiple Programming Languages and Code Quality}, 
  year={2016},
  doi={10.1109/SANER.2016.112}}

@INPROCEEDINGS{7396422,
  author={Mushtaq, Zaigham and Rasool, Ghulam},
  booktitle={2015 ICOSST},
  title={Multilingual source code analysis: State of the art and challenges}, 
  year={2015},
  doi={10.1109/ICOSST.2015.7396422}}


@INPROCEEDINGS{developersCare,
  author={Yamashita, Aiko and Moonen, Leon},
  booktitle={2013 20th WCRE}, 
  title={Do Developers Care About Code Smells? An Exploratory Survey}, 
  year={2013},
  doi={10.1109/WCRE.2013.6671299}}


  @INPROCEEDINGS{1173068,
  author={van Emden, E. and Moonen, L.},
  booktitle={9th Working Conference on Reverse Engineering, 2002. Proceedings.}, 
  title={Java Quality Assurance by Detecting Code Smells}, 
  year={2002},
  doi={10.1109/WCRE.2002.1173068}}

  @misc{treeSitter,
    author = {Brunsfeld, Max},
    title = {tree-sitter},
    year = {2013},
    url = {https://github.com/tree-sitter/tree-sitter}
}

  @misc{ApacheCommonsLang,
    title = {Apache Commons Lang},
    year = {2009},
    url = {https://github.com/apache/commons-lang}
}

  @misc{Jekins,
    title = {Jenkins},
    year = {2010},
    url = {https://github.com/jenkinsci/jenkins}
}


@misc{Django,
  title = {Django},
  url = {https://www.djangoproject.com},
  year= {2012}
}

@misc{MomentJS,
  title = {Moment.js},
  url = {https://momentjs.com/},
  year= {2011}
}

@misc{Maven,
  title = {Apache Maven},
  url = {https://maven.apache.org/},
  year= {2009}
}

@INPROCEEDINGS{Pysmell,
  author={Chen, Zhifei and Chen, Lin and Ma, Wanwangying and Xu, Baowen},
  booktitle={2016 International Conference on Software Analysis, Testing and Evolution (SATE)}, 
  title={Detecting Code Smells in Python Programs}, 
  year={2016},
  volume={},
  number={},
  pages={18-23},
  keywords={Measurement;Programming;Maintenance engineering;Software;Computer architecture;Manuals;Syntactics;Python;code smells;program maintenance;refactoring},
  doi={10.1109/SATE.2016.10}}


@book{CleanCode,
  author         = {Martin, Robert Cecil},
  publisher      = {Prentice Hall},
  title          = {Clean Code: A Handbook of Agile Software Craftsmanship},
  year           = {2009}
}

@book{SQLAntipatterns,
author = {Karwin, Bill},
title = {SQL Antipatterns: Avoiding the Pitfalls of Database Programming},
year = {2010},
isbn = {1934356557},
publisher = {Pragmatic Bookshelf},
edition = {1st},
}

@book{RefactoringWorkbook,  
author = {Wake, William C.},
title = {Refactoring Workbook},
year = {2003},
isbn = {0321109295},
publisher = {Addison-Wesley Longman Publishing Co., Inc.},
address = {USA},
edition = {1},
abstract = {From the Publisher: As a programmer, you need to be able to recognize and improve problematic code, so the program remains in a working state throughout the software lifecycle. Refactoring-the art of improving the design of existing code safely-provides an efficient, reliable system for bringing order to the chaos, and one that keeps the surprises to a minimum! Refactoring can be difficult to learn, but Refactoring Workbook, by consultant William C. Wake, presents the material in a easy-learning format that makes learning enjoyable and effective. For many, the obstacle to learning refactoring is in identifying the "smells"the potential problem areas-found in code. Instead of having you read about the smells, Refactoring Workbook makes sure you understand them. You'll solve a carefully assembled series of problems, and you'll find yourself learning at a deeper level and arriving at a few insights of your own. Wake uses the workbook methoda learning-focused approach that forces you to apply the techniques presented in the book-in the rest of the book. This approach helps you learn and apply the most important refactoring techniques to your code and, as a side benefit, helps you to think more about creating great code even when you're not refactoring. Refactoring Workbook provides user-friendly references such as: A handy, quick-reference "smell finder" A standard format for describing smells Appendices showing key refactorings A listing of Java™ tools that support refactoring This book is intended for programmers with a knowledge of Java, though a C# or C++ programmer with a basic understanding of Javwould also be able to follow and learn from the examples. It can be used as a companion to Martin Fowler's Refactoring (also from Addison-Wesley Professional), which provides step-by-step instructions for many refactorings.}
}



@INPROCEEDINGS{whenandwhy,
  author={Tufano, Michele and Palomba, Fabio and Bavota, Gabriele and Oliveto, Rocco and Di Penta, Massimiliano and De Lucia, Andrea and Poshyvanyk, Denys},
  booktitle={2015 IEEE/ACM 37th IEEE International Conference on Software Engineering}, 
  title={When and Why Your Code Starts to Smell Bad}, 
  year={2015},
  volume={1},
  number={},
  pages={403-414},
  keywords={Measurement;Software;Ecosystems;History;Androids;Humanoid robots;Maintenance engineering;bad code smells;mining software repositories;empirical study},
  doi={10.1109/ICSE.2015.59}}

  @INPROCEEDINGS{lifespan,
  author={Peters, Ralph and Zaidman, Andy},
  booktitle={2012 16th European Conference on Software Maintenance and Reengineering}, 
  title={Evaluating the Lifespan of Code Smells using Software Repository Mining}, 
  year={2012},
  volume={},
  number={},
  pages={411-416},
  keywords={Software systems;Data mining;Finite element methods;Java;Databases},
  doi={10.1109/CSMR.2012.79}}


@inbook{Jerzyk2023,
	abstract = {Context: Code Smells---a concept not fully understood among programmers, crucial to the code quality, and yet unstandardized in the scientific literature. Objective: Goal ({\#}1): To provide a widely accessible Catalog that can perform useful functions both for researchers as a unified data system, allowing immediate information extraction, and for programmers as a knowledge base. Goal ({\#}2): To identify all possible concepts characterized as Code Smells and possible controversies. Goal ({\#}3): To characterize the Code Smells by assigning them appropriate characteristics. Method: We performed a combined search of formally published literature and grey material strictly on Code Smell and related concepts where it might never have been mentioned, along with the term ``Code Smell'' as a keyword. The results were analyzed and interpreted using the knowledge gathered, classified, and verified for internal consistency. Results: We identified 56 Code Smells, of which 15 are original propositions, along with an online catalog. Each smell was classified according to taxonomy, synonyms, type of problem it causes, relations, etc. In addition, we have found and listed 22 different types of Bad Smells called hierarchies and drew attention to the vague distinction between the Bad Smell concepts and Antipatterns. Conclusion: This work has the potential to raise awareness of how widespread and valuable the concept of Code Smells within the industry is and fill the gaps in the existing scientific literature. It will allow further research to be carried out consciously because access to the accumulated information resource is no longer hidden or difficult. Unified data will allow for better reproducibility of the research, and the subsequent results obtained may be more definitive},
	address = {Cham},
	author = {Jerzyk, Marcel and Madeyski, Lech},
	booktitle = {Developments in Information and Knowledge Management Systems for Business Applications: Volume 7},
	doi = {10.1007/978-3-031-25695-0_24},
	editor = {Kryvinska, Natalia and Gregu{\v{s}}, Michal and Fedushko, Solomiia},
	isbn = {978-3-031-25695-0},
	pages = {543--576},
	publisher = {Springer Nature Switzerland},
	title = {Code Smells: A Comprehensive Online Catalog and Taxonomy},
	url = {https://doi.org/10.1007/978-3-031-25695-0_24},
	year = {2023},
	bdsk-url-1 = {https://doi.org/10.1007/978-3-031-25695-0_24}}


@inproceedings{DetectingDefectsInObject-orientedDesigns,
author = {Travassos, Guilherme and Shull, Forrest and Fredericks, Michael and Basili, Victor R.},
title = {Detecting defects in object-oriented designs: using reading techniques to increase software quality},
year = {1999},
isbn = {1581132387},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/320384.320389},
doi = {10.1145/320384.320389},
abstract = {Inspections can be used to identify defects in software artifacts. In this way, inspection methods help to improve software quality, especially when used early in software development. Inspections of software design may be especially crucial since design defects (problems of correctness and completeness with respect to the requirements, internal consistency, or other quality attributes) can directly affect the quality of, and effort required for, the implementation.We have created a set of “reading techniques” (so called because they help a reviewer to “read” a design artifact for the purpose of finding relevant information) that gives specific and practical guidance for identifying defects in Object-Oriented designs. Each reading technique in the family focuses the reviewer on some aspect of the design, with the goal that an inspection team applying the entire family should achieve a high degree of coverage of the design defects.In this paper, we present an overview of this new set of reading techniques. We discuss how some elements of these techniques are based on empirical results concerning an analogous set of reading techniques that supports defect detection in requirements documents. We present an initial empirical study that was run to assess the feasibility of these new techniques, and discuss the changes made to the latest version of the techniques based on the results of this study.},
booktitle = {Proceedings of the 14th ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications},
pages = {47–56},
numpages = {10},
keywords = {object oriented software quality, object testing and metrics, software engineering practices, software inspection},
location = {Denver, Colorado, USA},
series = {OOPSLA '99}
}


@article{SANTOS2018450,
title = {A systematic review on the code smell effect},
journal = {Journal of Systems and Software},
volume = {144},
pages = {450-477},
year = {2018},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2018.07.035},
url = {https://www.sciencedirect.com/science/article/pii/S0164121218301444},
author = {José Amancio M. Santos and João B. Rocha-Junior and Luciana Carla Lins Prates and Rogeres Santos do Nascimento and Mydiã Falcão Freitas and Manoel Gomes de Mendonça},
keywords = {Code smell, Systematic review, Thematic synthesis},
abstract = {Context: Code smell is a term commonly used to describe potential problems in the design of software. The concept is well accepted by the software engineering community. However, some studies have presented divergent findings about the usefulness of the smell concept as a tool to support software development tasks. The reasons of these divergences have not been considered because the studies are presented independently. Objective: To synthesize current knowledge related to the usefulness of the smell concept. We focused on empirical studies investigating how smells impact the software development, the code smell effect. Method: A systematic review about the smell effect is carried out. We grouped the primary studies findings in a thematic map. Result: The smell concept does not support the evaluation of quality design in practice activities of software development. There is no strong evidence correlating smells and some important software development attributes, such as effort in maintenance. Moreover, the studies point out that human agreement on smell detection is low. Conclusion: In order to improve analysis on the subject, the area needs to better outline: (i) factors affecting human evaluation of smells; and (ii) a classification of types of smells, grouping them according to relevant characteristics.}
}


@article{ML,
author = {Pontillo, Valeria and Amoroso d’Aragona, Dario and Pecorelli, Fabiano and Di Nucci, Dario and Ferrucci, Filomena and Palomba, Fabio},
title = {Machine learning-based test smell detection},
year = {2024},
issue_date = {Mar 2024},
url = {https://doi.org/10.1007/s10664-023-10436-2},
doi = {10.1007/s10664-023-10436-2},
}

@inproceedings{Santana,
author = {Santana, Amanda and Cruz, Daniel and Figueiredo, Eduardo},
title = {An exploratory study on the identification and evaluation of bad smell agglomerations},
year = {2021},
isbn = {9781450381048},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3412841.3442003},
doi = {10.1145/3412841.3442003},
booktitle = {Proceedings of the 36th Annual ACM Symposium on Applied Computing},
pages = {1289–1297},
numpages = {9},
keywords = {software modularity, bad smell agglomeration, bad smell},
location = {Virtual Event, Republic of Korea},
series = {SAC '21}
}


@article{Pascarella,
  title={On The Effect Of Code Review On Code Smells},
  author={Luca Pascarella and Davide Spadini and Fabio Palomba and Alberto Bacchelli},
  journal={ArXiv},
  year={2019},
  volume={abs/1912.10098},
  url={https://api.semanticscholar.org/CorpusID:209444378}
}

@misc{Jscent,
    author = {Starke, Sarchen},
    title = {Jscent},
    year = {2021},
    url = {https://github.com/moskirathe/JScent},
}

@misc{DesigniteJava,
    author = {Sharma, Tushar},
    title = {DesigniteJava},
    year = {2021},
    url = {https://github.com/tushartushar/DesigniteJava},
}


@inproceedings{MultiLanguageCodeSmells,
author = {Abidi, Mouna and Grichi, Manel and Khomh, Foutse and Gu\'{e}h\'{e}neuc, Yann-Ga\"{e}l},
title = {Code smells for multi-language systems},
year = {2019},
isbn = {9781450362061},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3361149.3361161},
doi = {10.1145/3361149.3361161},
abstract = {Software quality becomes a necessity and no longer an advantage. In fact, with the advancement of technologies, companies must provide software with good quality. Many studies introduce the use of design patterns as improving software quality and discuss the presence of occurrences of design defects as decreasing software quality. Code smells include low-level problems in source code, poor coding decisions that are symptoms of the presence of anti-patterns in the code. Most of the studies present in the literature discuss the occurrences of design defects for mono-language systems. However, nowadays most of the systems are developed using a combination of several programming languages, in order to use particular features of each of them. As the number of languages increases, so does the number of design defects. They generally do not prevent the program from functioning correctly, but they indicate a higher risk of future bugs and makes the code less readable and harder to maintain. We analysed open-source systems, developers' documentation, bug reports, and programming language specifications and extracted bad practices related to multi-language systems. We encoded these practices in the form of code smells. We report in this paper 12 code smells.},
booktitle = {Proceedings of the 24th European Conference on Pattern Languages of Programs},
articleno = {12},
numpages = {13},
keywords = {code analysis, code smells, multi-language systems, software quality},
location = {Irsee, Germany},
series = {EuroPLop '19}
}

@INPROCEEDINGS{Abidi2,
  author={Abidi, Mouna and Openja, Moses and Khomh, Foutse},
  booktitle={2020 IEEE/ACM 17th International Conference on Mining Software Repositories (MSR)}, 
  title={Multi-language Design Smells: A Backstage Perspective}, 
  year={2020},
  volume={},
  number={},
  pages={615-618},
  keywords={Surveys;Computer languages;Optimized production technology;Software quality;Data mining;Survey;Multi-language systems;Design smells;JNI},
  doi={10.1145/3379597.3387508}}
