@ARTICLE{6392174,
  author={Sjøberg, Dag I.K. and Yamashita, Aiko and Anda, Bente C.D. and Mockus, Audris and Dybå, Tore},
  journal={IEEE Transactions on Software Engineering}, 
  title={Quantifying the Effect of Code Smells on Maintenance Effort}, 
  year={2013},
  volume={39},
  number={8},
  pages={1144-1156},
  keywords={Maintenance engineering;Java;Software;Surgery;Time measurement;Context;Electronic mail;Maintainability;object-oriented design;product metrics;code churn},
  doi={10.1109/TSE.2012.89}}

@inbook{Fowler_Beck,
 place={Reading, MA}, 
 title={Bad Smells in Code}, 
 booktitle={Refactoring: Improving the Design of Existing Code}, 
 publisher={Addison-Wesley, Addison Wesley longman, Inc.}, 
 author={Fowler, Martin and Beck, Kent}, year={1999}
 } 

@INPROCEEDINGS{6405287,
  author={Yamashita, Aiko and Moonen, Leon},
  booktitle={2012 28th IEEE International Conference on Software Maintenance (ICSM)}, 
  title={Do code smells reflect important maintainability aspects?}, 
  year={2012},
  volume={},
  number={},
  pages={306-315},
  keywords={Maintenance engineering;Interviews;Java;Software maintenance;Measurement;Encoding;maintainability evaluation;code smells},
  doi={10.1109/ICSM.2012.6405287}}

@INPROCEEDINGS{5741260,
  author={Abbes, Marwen and Khomh, Foutse and Guéhéneuc, Yann-Gaël and Antoniol, Giuliano},
  booktitle={2011 15th European Conference on Software Maintenance and Reengineering}, 
  title={An Empirical Study of the Impact of Two Antipatterns, Blob and Spaghetti Code, on Program Comprehension}, 
  year={2011},
  volume={},
  number={},
  pages={181-190},
  keywords={Maintenance engineering;Programming;Analysis of variance;Java;Indexes;NASA;Time measurement;Antipatterns;Blob;Spaghetti Code;Program Comprehension;Program Maintenance;Empirical Software Engineering},
  doi={10.1109/CSMR.2011.24}}


@inproceedings{DetectingDefectsInObject,
author = {Travassos, Guilherme and Shull, Forrest and Fredericks, Michael and Basili, Victor R.},
title = {Detecting defects in object-oriented designs: using reading techniques to increase software quality},
year = {1999},
isbn = {1581132387},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/320384.320389},
doi = {10.1145/320384.320389},
abstract = {Inspections can be used to identify defects in software artifacts. In this way, inspection methods help to improve software quality, especially when used early in software development. Inspections of software design may be especially crucial since design defects (problems of correctness and completeness with respect to the requirements, internal consistency, or other quality attributes) can directly affect the quality of, and effort required for, the implementation.We have created a set of “reading techniques” (so called because they help a reviewer to “read” a design artifact for the purpose of finding relevant information) that gives specific and practical guidance for identifying defects in Object-Oriented designs. Each reading technique in the family focuses the reviewer on some aspect of the design, with the goal that an inspection team applying the entire family should achieve a high degree of coverage of the design defects.In this paper, we present an overview of this new set of reading techniques. We discuss how some elements of these techniques are based on empirical results concerning an analogous set of reading techniques that supports defect detection in requirements documents. We present an initial empirical study that was run to assess the feasibility of these new techniques, and discuss the changes made to the latest version of the techniques based on the results of this study.},
booktitle = {Proceedings of the 14th ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications},
pages = {47–56},
numpages = {10},
keywords = {object oriented software quality, object testing and metrics, software engineering practices, software inspection},
location = {Denver, Colorado, USA},
series = {OOPSLA '99}
}

@misc{PMD,
title={PMD},
url={https://github.com/pmd},
journal={GitHub},
author={Dangel, 
Andreas}, 
year={2012}, 
month={Jul}
} 

@misc{CheckStyle,
title={Checkstyle},
url={https://github.com/checkstyle/checkstyle},
journal={GitHub},
}

@INPROCEEDINGS{723183,
  author={Kullbach, B. and Winter, A. and Dahm, P. and Ebert, J.},
  booktitle={Proceedings Fifth Working Conference on Reverse Engineering (Cat. No.98TB100261)}, 
  title={Program comprehension in multi-language systems}, 
  year={1998},
  volume={},
  number={},
  pages={135-143},
  keywords={Power system modeling;Software systems;Software maintenance;Relational databases;Database languages;Insurance;Software performance;Programming;Data structures;Image databases},
  doi={10.1109/WCRE.1998.723183}}


@inproceedings{10.1109/SCAM.2012.11,
author = {Mayer, Philip and Schroeder, Andreas},
title = {Cross-Language Code Analysis and Refactoring},
year = {2012},
isbn = {9780769547831},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/SCAM.2012.11},
doi = {10.1109/SCAM.2012.11},
abstract = {Software composed of artifacts written in multiple (programming) languages is pervasive in today's enterprise, desktop, and mobile applications. Since they form one system, artifacts from different languages reference one another, thus creating what we call semantic cross-language links. By their very nature, such links are out of scope of the individual programming language, they are ignored by most language-specific tools and are often only established -- and checked for errors -- at runtime. This is unfortunate since it requires additional testing, leads to brittle code, and lessens maintainability. In this paper, we advocate a generic approach to understanding, analyzing and refactoring cross-language code by explicitly specifying and exploiting semantic links with the aim of giving developers the same amount of control over and confidence in multi-language programs they have for single-language code today.},
booktitle = {Proceedings of the 2012 IEEE 12th International Working Conference on Source Code Analysis and Manipulation},
pages = {94–103},
numpages = {10},
keywords = {tooling, refactoring, program understanding, polyglot programming, multi-language, cross-language, constraints, analysis},
series = {SCAM '12}
}

@INPROCEEDINGS{7476675,
  author={Kochhar, Pavneet Singh and Wijedasa, Dinusha and Lo, David},
  booktitle={2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)}, 
  title={A Large Scale Study of Multiple Programming Languages and Code Quality}, 
  year={2016},
  volume={1},
  number={},
  pages={563-573},
  keywords={Computer bugs;Java;Programming;Software quality;Google;multiple programming languages;code quality;bug fix commits;multiple regression models},
  doi={10.1109/SANER.2016.112}}

@INPROCEEDINGS{7396422,
  author={Mushtaq, Zaigham and Rasool, Ghulam},
  booktitle={2015 International Conference on Open Source Systems and Technologies (ICOSST)}, 
  title={Multilingual source code analysis: State of the art and challenges}, 
  year={2015},
  volume={},
  number={},
  pages={170-175},
  keywords={Analytical models;Object oriented modeling;Java;Reverse engineering;Grammar;Software systems;Source code analysis;Cross-language;Analysis methods;Reverse Engineering;Source code parsing},
  doi={10.1109/ICOSST.2015.7396422}}


@INPROCEEDINGS{developersCare,
  author={Yamashita, Aiko and Moonen, Leon},
  booktitle={2013 20th Working Conference on Reverse Engineering (WCRE)}, 
  title={Do Developers Care About Code Smells? An Exploratory Survey}, 
  year={2013},
  volume={},
  number={},
  pages={242-251},
  doi={10.1109/WCRE.2013.6671299}}

  @INPROCEEDINGS{1173068,
  author={van Emden, E. and Moonen, L.},
  booktitle={Ninth Working Conference on Reverse Engineering, 2002. Proceedings.}, 
  title={Java Quality Assurance by Detecting Code Smells}, 
  year={2002},
  volume={},
  number={},
  pages={97-106},
  doi={10.1109/WCRE.2002.1173068}}

  @misc{treeSitter,
    author = {Brunsfeld, Max},
    title = {tree-sitter},
    year = {2013},
    url = {https://github.com/tree-sitter/tree-sitter}
}